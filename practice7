#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
//strlen和sizeof的区别
//：strlen是库函数，要引用头文件，求字符串长度的，只能针对字符串球会长度
//有多少个字符就显示多少。strlen求“\0”之前的字符个数
//：sizeof是操作符，计算变量，数组类型的大小，单位是字节
//一维数组：
//int main()
//{
//	char arr1[] = "abcef";
//	int arr3[] = { 1,2,3 };
//	char arr2[] = "abc";
//	int c = sizeof(arr1);
//	int d = sizeof(arr2);
//	printf("%d\n", c);
//	printf("%d\n", sizeof(arr3));
//	printf("%d\n", d);
//	return 0;
//}

//int main()
//{
//	char arr1[] = "abc";
//	char arr2[] = { 'a','b','c' };
//	printf("%d\n", sizeof(arr1));
//	printf("%d\n", sizeof(arr2));
//	printf("%d\n", strlen(arr1));
//	printf("%d\n", strlen(arr2));
//	return 0;
//}
//数组在内存中是连续存放的
//二维数组：int arr[行][列]
//int arr[3][4]={{1,2,3},{4,5}}
//:第一行放123，第二行放45，其余补零。
//不能像一维数组一样这样创建：int arr[]={1，2，3，4，5，6}
//列必须要有标注,行可以没有
//int arr[][4]={{1,2,3,4},{5,6,7,8}};
////////////
////////////int main()
////////////{
////////////	int i = 1;
////////////	int k = 1;
////////////	for (i = 1; i <= 9; i++)
////////////	{
////////////		k = 1;
////////////		while (k <= i)
////////////		{
////////////			int a = i * k;
////////////			printf("%d*%d=%-2d ", i, k, a);
////////////			k++;
////////////		}
////////////		printf("\n");
////////////	}
////////////	return 0;
////////////}
//二维数组的访问
//int main()
//{
//	int i = 0;
//	int arr[2][3] = { {1,2,3},{4,5,6} };
//	for (i = 0; i < 2; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 3; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}
//int main()
//{
//	int i = 0;
//	int arr[2][3] = { {1,2,3},{4,5,6} };
//	for (i = 0; i < 2; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 3; j++)
//		{
//			printf("&arr[%d][%d]=%p\n ", i,j,&arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}


//冒泡排序：

//
//void buble_sort(int arr[],int sz)
//{
//
//	int i = 0;
//	for (i=0; i<sz-1; i++)//确定冒泡排序的躺数
//	{
//		int flag = 1;
//		int j = 0;
//		for (j = 0; j < sz -1- i; j++)//每一趟冒泡排序
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int tmp = 0;
//				tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//				flag = 0;
//			}
//		}
//		if (flag == 1)//判断是不是已经排好了
//		{
//			break;
//		}
//	}
//}
//
//int main() 
//{
//	int arr[] = { 10,9,8,7,6,5,4,3,2,1 };
//	//对arr进行升序排列
//	int sz = sizeof(arr) / sizeof(arr[0]);//
//	//如果在函数内部需要参数的个数，一定要在外面求好再传进去
//	buble_sort(arr,sz);//冒泡排序函数
//	int s = 0;
//	
//	for (s = 0; s < sz; s++)
//	{
//		printf("%d ", arr[s]);
//	}
//	
//	return 0;
//}

int main()
{
	int arr[] = { 1,2,3,4,5,6,7 };
	printf("%p\n", arr);//代表首个元素的地址
	printf("%p\n", &arr[0]);//代表首个元素的地址
	printf("%d\n", *arr);//*arr首元素地址
	printf("%p\n", &arr);//代表整个数组的地址，这几个一样但意义不同
	return 0;
}
//数组名是首元素的地址（有两个例外）
//1：sizeof内部放的数组名表示整个数组，计算的是整个数组的大小，单位是字节
//2：&数组名  的时候代表的是整个数组，&数组名，取出的是整个数组的地址
