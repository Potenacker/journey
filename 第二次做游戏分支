#include"game.h"
#include<stdio.h>
#define _CRT_SECURE_NO_WARNINGS
void Initboard(char board[ROW][COL], int row, int col)
{ 
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

//void displayboard(char board[ROW][COL], int row, int col)
//{
//	//打印数据和分割行
//	int i = 0;
//	for (i = 0; i < row; i++)
//	{
//		printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
//		if (i < row - 1)
//		{
//			printf("---|---|---\n");
//		}
//	}
//}
void displayboard(char board[ROW][COL], int row, int col)
{
	//打印数据和分割行
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{	
			printf(" %c ", board[i][j]);
			if (j < col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		for (j = 0; j < col; j++)
		{	
			if (i < row - 1)
			{
				printf("---");
				if (j < col - 1)
				{
					printf("|");
				}
			}
		}
		printf("\n");
	}
}


void playermove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走：\n");
	while (1)
	{
		printf("请输入坐标\n");
		scanf("%d%d", &x, &y);
		//判断坐标的合法性
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标已被占用！");
			}
		}
		else
		{
			printf("坐标输入错误，请重新输入！\n");
		}
	}
}


void pcmove(char board[ROW][COL], int row, int col)
{
	int x =  0;
	int y =  0;
	printf("电脑走：\n");
	//想小于几，就%几
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}

}
//格子满了-1
//格子没满-0
int isfull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;
			}
		}
	}
	return 1;
}

char iswin(char board[ROW][COL], int row, int col)
{
	//横三排
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col-1; j++)
		{
			if (board[i][j] == board[i][j + 1]&&board[i][j]!=' ')
			{
				return board[i][j];
			}
		}
	}
	//竖三列
	for (i = 0; i < col; i++)
	{
		for (j = 0; j < row - 1; j++)
		{
			if (board[j][i] == board[j][i + 1] && board[j][i] != ' ')
			{
				return board[j][i];
			}
		}
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
		return board[1][1];
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
		return board[1][1];
	////两个对角线
	//for (i = 0; i < row-1; i++)
	//{
	//	for (j = 0; j < col-1; j++)
	//	{
	//		if (board[i][j] == board[i + 1][j + 1]&&board[i][j]!=' ')
	//		{
	//			return board[i][j];
	//		}
	//		else if (board[row-1 - i][j] == board[row - i - 2][j + 1]&& board[row - 1-i][j]==' ')
	//		{
	//			return board[1][col];
	//		}
	//	}
	//}
	//判断是否平局
	if (isfull(board, ROW, COL) == 1)
	{
		return 'Q';
	}
	return 'C';
}
