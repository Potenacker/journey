#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
//goto语句，跳到哪里去
//int main()
//{
//	again:
//	printf("hello\n");
//	goto again;
//	return 0;
//}
//这就会造成死循环
//再比如
//int main()
//{
//	printf("hello\n");
//	goto again;
//	printf("hehe\n");
//again:
//	printf("haha\n");
//	return 0;
//}
//这样就会跳过hehe的打印
//goto缺点：语句容易打乱代码运行顺序，致使逻辑混乱，建议少用。
//    优点：用于深度多重嵌套语句中的快速脱离

//关机代码：shutdown -s -t 时间        ：将在多少秒后关机
//         shutdown -a                :取消关机
//system（）-执行系统命令
//
//int main()
//{
//	system("shutdown -s -t 60");
//	char arr[20] = { 0 };
//	while (1)
//	{
//		printf("电脑将在一分钟后关机，请输入hello来终止\n");
//		scanf("%s", arr);
//		if (strcmp(arr, "hello") == 0)
//		{
//			system("shutdown -a");
//			printf("已取消关机");
//			break;
//		}
//	}
//	return 0;
//}
//int Add(int x,int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a =20;
//	int b = 10;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}

//函数：
//strlen:求字符串的长度
//strcpy：复制字符串
// strcpy（目的地，出发地）
//拷贝时会将最后的\0也拷贝进去，然后就会停止，
//memset：重新设置内存：如下
//memset(指针地址，‘要替换的东西’，替换的个数)
//int main()
//{
//	char arr[] = { "hello world" };
//	memset(arr, '#', 5);
//	printf("%s\n", arr);
//	return 0;
//}
//输出的就是##### world

//自定义函数（重要）
//函数返回类型 函数名（函数参数）
//ret_type fun_name(paral, *)
//{
//	statement//语句项 （函数体：交待的是函数怎么实现的）
//}
//int getmax(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int i = getmax(a, b);
//	printf("%d", i);
//	return 0;
//}

//试一下能不能不用第三个变量去交换两个变量的值
//x = x + y;
//y = x - y;
//x = x - y;
//void swap(char x, char y)//void函数无返回值
//{
//	x = x + y;
//	y = x - y;
//	x = x - y;
//}
//传上来了两个地址，就可以顺着地址再返回去
//void swap(int* pa, int* pb)//pa，pb名为形参（只在函数中有效）
//{                             //当实参传给形参的时候，形参只是实参的一份拷贝
//	*pa = *pa + *pb;         //对形参的修改不会改变实参
//	*pb = *pa - *pb;
//	*pa = *pa - *pb;
//}
////传过来的是地址，所以要定义int*来接收
//int main()
//{
//	int a = 10;
//	int b = 20;
//	swap( &a,  &b);   //a，b名为实参（变量常量表达式函数都可以）
//	printf("a= %d b= %d", a, b);
//	return 0;
//}
//上面的这个代码并不能完成交换
//因为上面的x，y和下面的a，b没有联系
//int main()
//{
//	int a = 10;
//	int b = 20;
//
//	return 0;
//}
//函数的调用分为传值调用，传址调用

//作业：
//1、打印100-200之间的素数
//int su(int x)
//{
//	int a = 0;
//	for (a = 1; a <= x / 2; a++)
//	{
//		if (x % a != 0);
//		else 
//			break;
//	}
//	if (a > x)
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}
//
//
//int main()
//{
//	int i = 0;
//	int s = 0;
//	for (i = 101; i <= 200; i+=2)
//	{
//		if (su(i) == 1);
//		{
//			printf("%d ", s);
//		}
//		if (su(i) == 0);
//		{
//			;
//		}
//	}
//	return 0;
//}

//未知错误：
//int su(int n)
//{
//	int a = 0;
//	for (a = 2; a <= sqrt(n); a++)
//	{
//		if (n % a == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;
//}
//
//int main()
//{
//	int i = 0;
//	for (i = 101; i <= 200; i+=2)
//	{
//		if (su(i) == 1);
//		{
// 			printf("%d ", i);
//		}
//	}
//	return 0;
//}

//int su(int n)
//{
//	int a = 0;
//	for (a = 2; a <= sqrt(n); a++)
//	{            //重点不要搞错 
//		if (n % a == 0)
//		{
//			return 0;//一旦运行return，立刻停止调用函数，返回主函数
//		}
//	}
//	return 1;
//}
//
//int main()
//{
//	int i = 0;
//	for (i = 101; i <= 200; i += 2)
//	{
//		if (su(i) == 1)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}

//写一个函数输出1000到2000年之间的闰年
//int run(int n)
//{
//	if ((n % 4 == 0 && n % 100 != 0) || (n % 400 == 0))
//	{
//		return 1;
//	}
//	return 0;
//}
//
//int main()
//{
//	int a = 0;
//	for (a = 1000; a <= 2000; a++)
//	{
//		if (run(a) == 1)
//			printf("%d ",a);
//	}
//	return 0;
//}              //传过来的是个指针，不是个数组，（arr）
//int binary_search(int arr[],int k, int sz)
//{
//	
//	int left = 0;
//	int right = sz-1;
//	while (left<=right)
//	{
//		int mid = (right + left) / 2;
//		if (k > arr[mid])
//		{
//			left = mid + 1;
//		}
//		else if (k < arr[mid])
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;
//
//}
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;             //传过去的只是数组arr的首位的地址
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int ret = binary_search(arr, k, sz);//先把函数怎么用写出来
//	if (ret == -1)
//	{
//		printf("找不到指定数字\n");
//	}
//	else
//	{
//		printf("找到了，下标是：%d\n",ret);
//	}
//	return 0;
//}
//int main()
//{
//	int arr[20] = { 0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	printf("%d\n", sz);
//	return 0;
//}
//void Add(int* p)
//{
//	(*p)++;
//}
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	return 0;
//}


//函数的嵌套调用（套娃）和链式访问（直接往里写）
//
//int main()
//{
//	printf("%d", printf("%d", printf("%d", 1)));
//	//printf函数返回值是打印字符的个数。
//	return 0;
//}


//函数的声明 这个放在一个头文件里，专门用来声明
//int Add(int x, int y);
//声明自己定义的头文件，就可以用了
#include "Add.h"
int main()
{
	int a = 10;
	int b = 20;
	int sum = 0;
	sum = Add(a, b);//函数的调用
	printf("%d\n", sum);
	return 0;
}
//函数的定义 这个一般放在另一个源文件里
//int Add(int x, int y)
//{
//	int z = x + y;
//	return z;
//}
//搞清楚三者的关系
//一个源文件里存函数
//一个头文件里来声明
//在本代码里引用头文件后就可以直接使用了
