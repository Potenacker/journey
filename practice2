//#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
	int a = 0;
	int* p = &a;
	printf("%d\n", sizeof(a));//字符大小是4
	printf("%d\n", sizeof(p));//32位，所以指针大小是4
	printf("%d\n", sizeof(char*));//同上
	printf("%d\n", sizeof(int*));//同上
	return 0;
}
//int main()
//{
//	int a = 10;
//	&a;
//	//printf("%d\n", a);
//	//*p = 20;                   //*:解引用符
//	printf("%d\n", a);
//	//printf("%p\n", &a);
//	printf("%p\n", &a);
//	return 0;
//}
//定义*p的类型要随着原符号
//如：int a->int *p=&a;
//    char a->char*p=&a;    p即为指针变量


//地址是由二进制序列产生的（位数 32/64）
//要存地址，在32位下，指针的大小为32/8=4个字节
//64位下，64/8=8个字节
 
 
//#include<stdio.h>
//#define xxx 值  定义常量和宏 
//如：
//#define Max 100//定义Max的值为100
//普通函数实现
//int Max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//宏的函数实现
//#define MAX(X,Y) (X>Y?X:Y)
//前面定义的宏（MAX（X，Y））会被替换成后面的(X>Y?X:Y)

//int main()
//{
//	int a = 20;
//	int b = 30;
//	int putong = Max(a, b);
//	int hong = MAX(a, b);
//	printf("%d\n", putong);
//	printf("%d\n", hong);
//	return 0;
//}


//void test()
//{
//	static int a = 1;
//	//static修饰局部变量，生命周期变长，不被销毁
//	//static修饰全局变量，改变了变量的作用域，
//	//让静态的全局变量只能在自己所在源文件的内部使用。
//	//static修饰函数
//	//static修饰函数改变了函数的链接属性
//	//外部链接属性->内部链接属性（在外部加上后，引用的外部函数就不可用了）
//	a++;
//	printf("a=%d\n", a);
//}
//int main()
//{
//	int i = 0;
//	while (i < 5)
//	{
//		test();
//		i++;
//	}
//	return 0;
//}


//int main()
//{
//    for (int i = 1; i<101; i++)
//    {
//        if (i % 15 == 0)
//            printf("麦叔\n");
//        else if (i % 3 == 0)
//            printf("麦\n");
//        else if (i % 5 == 0)
//            printf("叔\n");
//        else
//            printf("%d\n", i);
//    }
//	return 0;
//}

//错误：
//int a = 1;
//int d = 0;
//int and (int x, int y)
//{
//	d = a % 3 == 0 || a % 5 == 0;
//	a++;
//	return d;
//}
//
//int main()
//{
//	int b=0;
//	int c=1;
//	while (a < 100)
//	{
//		if (a % 15 == 0)
//			printf("三五：%d\n", b);
//		else
//			c = (d=1 ? '3.5':a);
//			printf("%d\n",c);
//		a++;
//	}
//	return 0;
//}
