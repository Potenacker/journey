#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
//	循环语句
//do while循环
//int main()
//{
//	int i = 0;
//	do                          //1   4
//	{		                    //2		
//		if (i == 9)
//				break;
//		i++;
//		if (i == 5)
//			continue;
//		printf("%d ", i);       
//	}
//	while (i < 10);            //3
//	return 0;
//}


//for循环
//优势在于把变量的初始值，判断，调整放在了一起。
//for(表达式1（初始化）;表达式2（条件判断）;表达式3（调整值）;）


//for循环的初始，判断，调整语句都可以被省略，但是
// 判断语句被省略的话，会被判定恒为真，就会陷入死循环。
// 如果不是非常熟练，建议不要省略代码
//int main()
//{
//	int i = 0;
//	//流程是表达式1，表达式2，循环语句，表达式3，表达式2
//	//不可在for循环体内修改循环变量，防止失去控制
//	//条件判断最好采用左闭右开区间
//如下
//int main()
//{
//int i = 0;
//int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//for (i = 0; i < 10; i++)
//{
//	printf("%d\n", arr[i]);
//}
//return 0;
//}
 

//	for (i = 1; i < 11; i++)
//	{
//		if (i == 5)
//			continue;
//		printf("%d ", i);
//		if (i == 8)
//			break;
//	}
//	//printf("hehe");
//	return 0;
//}

////来个死循环
//int main()
//{
//	int i = 0;
//	while (i <= 10)
//	{
//		if (i == 5)
//			continue;
//		printf("%d\n", i);
//		i++;
//	}
//	return 0;
//}


//int main()
//{
//	int ch = 0;
//	while ((ch = getchar()) != EOF)
//	{
//		if (ch < '0' || ch>'9')
//			continue;
//		putchar(ch);
//	}
//	return 0;
//}



//int main()
//{
//	int ret = 0;
//	int ch = 0;
//	char password[20] = { 0 };
//	printf("请输入密码：");
//	scanf("%s", password);
////缓冲区还剩了一个回车，就是输完密码的那个
////接下来就是吧那个回车给读取掉，若是输入的密码里有空格，
////那么空格和之后的东西都会留下来
////所以要加getchar来把里面的内容读取掉，但是读取后什么都不用做，代码如下
//	while ((ch=getchar())!= '\n')
//	{
//		;//什么都不用做
//	}
//	//这段代码的价值就是清空缓存器
//	//上面这段代码的意思是把缓冲器里的东西读取干净
//	printf("请确认密码(Y/N)");
//	ret = getchar();
//	if (ret == 'Y')
//	{
//		printf("确认成功");
//	}
//	else
//	{
//		printf("确认失败");
//	}
//	return 0;
//}
//这段代码如果不输中间部分会直接在你输入密码后显示确认失败，原因见上

//int main()
//{
//	int ch = 0;
//	while ((ch = getchar()) != EOF)
//	{
//		putchar(ch);
//	}
//	return 0;
//}
