#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>

int main()
{
	char ch = 0;
	while ((ch = getchar()) != EOF)//无法一下子输入EOF，因为他是一个一个读取的
	{                       //想结束按crtl+z，这是将（！=）后面的EOF直接赋ch
		putchar(ch);      //EOF  ：end of file 文件结束标志
	}
	return 0;
}

//getchar:输入 putchar：输出
//int main()
//{
//	int ch = getchar();
//	putchar(ch);
//	printf("%c\n", ch);
//	return 0;
//}
//int main()
//{
//	int i = 1;
//	while (i <= 10)
//	{
//		if (i)
//			printf("%d\n", i);
//		continue;   //终止循环中“本次”循环countiue后边的语句
//		i++;
//	}
//	return 0;
//}
//帮助理解continue
//int main()
//{
//	int a = 0;
//	while (a < 10)
//	{
//		a++;
//		if (a == 4)
//			continue;        //当a=4时，跳过了下面的输出，继续循环
//		                      //注意，跳过的只是这个循环中的一部分
//		printf(" %d \n", a);  //注意和break的不同，break是直接终止循环
//	}
//	return 0;
//}

//分支语句和循环语句
//swicth
// swicth表达
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	switch (a)//switch里的变量必须是整形
//	{
//	case 1:    //如果switch里的变量等于1的话，case后边只能跟整型常量表达式
//		printf("星期一");
//		break;
//	case 2:
//		printf("星期二");
//		break;
//	}
//
//	return 0;
//}
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	switch (a)            //case里面，以符合条件的为入口，只要不遇到break
//		                   //就会一直执行下去！！！
//	{ 
//	case 1:
//		printf("hehe1\n");
//	case 2:
//			printf("hehe2\n");//case里可以加if语句，不能用counties
//	case 3:
//		printf("hehe3");
//	case 4:          
//	case 5:
//		printf("工作日");
//		break;             //没有遇到break会一直往下走
//	case 6:				   //这样写相较于上面的比较方便	
//	case 7:
//		printf("休息日");
//		break;
//	default:
//		printf("输入错误");   //如果输入的数有的不是上面的数，用default
//		break;               //case没有顺序，default放第一个也可以
//	}			 //处理非法的状况用default，可有可无，不写printf依然可以
//	return 0;
//}
//普通表达
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	if (1 == a)
//		printf("星期一\n");
//	else if (2 == a)
//	{
//		printf("星期二\n");
//	}
//	else if (3 == a)
//	{
//		printf("星期三\n");
//	}
//	else if (4 == a)
//	{
//		printf("星期四\n");
//	}
//	else
//		printf("休息");
//
//	
//	return 0;
//}
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int* p = &a;
//	printf("%d\n", a); //值：a或*p
//	printf("%p\n", &a);//地址：&a或p
//	return 0;
//}
//int main()
//{
//int a = 1;
//while (a <= 100)
//	{
//	if (a % 2 == 1)
//		printf(" % d",a);
//	/*else
//		printf("%d\n", a);*/
//		a++;
//	}
//	return 0;
//}
//int main()
//{
//	int a = 1;
//	int b = 2;
//	if (a == 0)
//		if (b == 2)
//			printf("hehe\n");
//		else
//			printf("haha\n");
//
//	if (a == 0)
//	{
//		if (b == 2)
//			printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//		
//
//	return 0;
//}


//int main()
//{
//	int a = 19;
//	if (a < 18)
//		printf("未成年");
//	else
//	{                           //if else控制多条语句时要用大括号括起来
//		if (a >= 18 && a < 40)
//			printf("青壮年");
//		else
//			printf("老年");
//	}
//	return 0;
//}
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	if (a < 18)
//		printf("未成年");
//	else if (a >= 18 && a < 40)
//		printf("青壮年");
//	else
//		printf("老年");
//	return 0;
//}





//结构体，描述复杂对象，通常包含多个特征
//如书：书名，作者，出版社。。。。
//创造一个结构体类型：
//struct book//目前只是说明了书的类型    
//{
//
//	char name[20];//书名
//	short price; //价格
//
//};
//int main()//开始创造一本书 
//{
//	//利用结构体类型创造一个该类型的结构体变量
//	struct book b1 = { "c语言程序设计",55};//开始创造一本书
//	struct book* pb = &b1;
//	printf("书名：%s\n", b1.name);       //%s:字符串: string
//	printf("价格:%d\n", b1.price);
////若要改变书名：用函数strcpy,书名本质上是数组，要拷贝字符串，用到了库函数string
//	//所以头文件要加上
//	strcpy(b1.name, "C++");//把C++拷贝到b1.name中
//	b1.price = 15; //b1.price 就相当于一个变量名（结构体的变量名），可以直接用。
//	printf("甩卖：%d\n", b1.price);
//	printf("%s\n", (*pb).name);//两种不同的表的形式，都可以
//	printf("%s\n", pb->name);//和上句一样，和第5行也一样
//	return 0;
//}
// . 结构体变量.成员
// ->结构体指针->成员

//int main()
//{
//
//    int b = 0;
//    printf("奇数：");
//    while (b < 100)
//    {
//        if (b % 2 == 0);
//        else
//            printf(" %2d ", b);
//        b++;
//    }
//    return 0;
//}
//
//int main()
//{
//	static int a = 10;
//	a++;
//	printf("%d\n", a);
//	return 0;
//}
