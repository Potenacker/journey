#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>
#include<math.h>
//计算n的阶乘
//int main()
//{
//	int i = 1;
//	int ret = 1;
//	for (i = 1;; i++)
//		ret = i *ret;
//	return 0; 
//}

//计算1！+2！+3！+4!+.....+n!
//int main()
//{
//	int i = 1;
//	int sum = 0;
//	int ret = 1;
//	int a = 0;
//	for (i=1; i < 11; i++)
//	{
//		a = i;
//		ret = 1;
//		while (a > 0)
//		{
//			ret = a * ret;
//			a--;
//		}
//		sum = sum + ret;
//	}
//	printf("%d", sum);
//	return 0;
//}
//对上面的代码进行优化
//int main()
//{
//	int i = 0;
//	int n = 0;
//	int sum = 0;
//	int ret = 1;
//	for (n = 1;n<=10; n++)
//	{
//		ret = ret * n;
//		sum = sum + ret;
//	}    
//	return 0;
//}
//找到有序数组中的一个数：
// 普通方法：
//int main()
//{
//	int a = 0;
//	int k =17;
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sa = sizeof(arr) / sizeof(arr[0]);
//	for (a = 0; a < sa; a++)
//	{
//		if (k == arr[a])
//		{
//			printf("找到了,下标是：%d\n", a);
//			break;
//		}
//	}
//	if (a >= sa)
//		printf("找不到");
//	return 0;
//}
//二分法：
//int main()
//{
//	int i = 0;
//	int k = 7;
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int right = sizeof(arr) / sizeof(arr[0])-1;
//	int left = 0;
//	int mid = (left + right) / 2;
//	for (; arr[mid] != k;)//条件也可以写成left<=rigt
//	{
//		if (arr[mid] > k)
//		{
//			left = left;
//			right = mid;  //mid-1也可以
//		}
//		else if (arr[mid] < k)
//		{
//			left = mid;    //left+1也可以
//			right = right;
//		}
//		mid = (left + right) / 2;
//
//		if (arr[mid] = k)
//		{
//			printf("找到了，下标是：%d\n", mid);
//			break;
//		}
//		if (arr[mid] != k)//也可以写成left>right
//			printf("找不到");
//	}
//	return 0;
//}
//错误代码：
//int main()
//{
//	char arr[] = {'w','e','l','c','o','m','e', 't','o', 'b','i','t','e'};
//	int right = sizeof(arr) / sizeof(arr[0])-1;
//	int left = 0;
//	if((sizeof(arr) / sizeof(arr[0]))%2==0)
//		while (left < right)
//		{
//			printf("%s  %s", arr[left], arr[right]);
//			left++;
//			right--;
//		}
//	else  
//		while (left < right)
//		{
//			printf("%s   %s", arr[left], arr[right]);
//			left++;
//			right--;
//		}
//	if (left = right)
//		printf("%s", arr[left]);
//	return 0;
//}
//新的存储方式：char arr1[]="welcome to bite!!"会自动计算大小
//当算下标的时候，由于最后还有一个\0，所以要  个数-2
//从两头开始，逐个显示字符
//int main()
//{
//	char arr1[] = "welcome to bite!!!!!";
//	char arr2[] = "####################";
//	int left = 0;
//	//int right = sizeof(arr1) / sizeof(arr1[0])-2;
//	int right = strlen(arr1)-1;//strlen求长度不包含最后的  \0,所以直接得出真实长度
//	while (left<=right)
//	{		
//		arr2[left]= arr1[left];
//		arr2[right]= arr1[right];
//		system("cls");           //执行系统命令的函数，cls：清空屏幕，用到stdlid.h
//		printf("%s\n", arr2);    //!!!!!printf一定要放在下边！！！
//		Sleep(1000);			 //打印完休息1秒  ，函数需要#include<windows.h>
//	
//		left++;
//		right--;
//	}
//	return 0;
//}
//int main()
//{
//	char password[20] = { 0 };//密码是一个字符串，读取的时候是一个一个读取的，                           
//	int i = 0;                //用字符串才能实现
//	for (i = 0; i < 3; i++)
//	{
//		printf("请输入密码：");
//		scanf("%s",password);
//		if (strcmp(password, "123456") == 0)//等号不能用来比较两个字符串是否相等
//		{
//			printf("密码正确");   //应该使用一个库函数：strcmp,头文件是string.h
//			break;    //strcmp(a1,a2),a1=a2,返回0，a1>a2,返回大于零的数，
//		}                             //a1<a2,返回小于零的数
//		else
//		{
//			printf("密码错误\n");
//		}
//	}
//	if(i==3)
//		printf("密码错误，已锁定");
//	return 0;
//}

//从大到小输出三个数：
//int Max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//#define Max(x,y) (x>y?x:y)
//#define Min(x,y) (x<y?x:y)
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	int A = 0;
//	int B = 0;
//	int C = 0;
//	int x = 0;
//	int z = 0;
//	scanf("%d%d%d", &a, &b, &c);
//	A = Max(a, b);
//	x = Min(a, b);
//	z = Min(A, c);
//	A = Max(A, c);
//	B = Max(x, z);
//	C = Min(x, z);
//	printf("%d %d %d", A, B, C);
//	return 0;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	int A = 0;
//	int B = 0;
//	int C = 0;
//	scanf("%d%d%d", &a, &b, &c);
//	if (a > b && a > c)
//	{
//		A = a;
//		if (b > c)
//		{
//			B = b;
//			C = c;
//		}
//		else
//		{
//			B = c;
//			C = b;
//		}
//	}
//
//	else if (b > c && b > a)
//	{
//		A = b;
//		if (c > a)
//		{
//			B = c;
//			C = a;
//		}
//		else
//		{
//			B = a;
//			C = c;
//		}
//	}
//	else if(c>a&&c>b)
//	{
//		A = c;
//		if (a > b)
//		{
//			B = a;
//			C = b;
//		}
//		else
//		{
//			B = b;
//			C = a;
//		}
//	}
//	printf("%d %d %d", A, B, C);
//	return 0;
//}
//打印三的倍数：
//int main()
//{
//	int i = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		if (i % 3 == 0)
//			printf("%d ", i);
//		else
//			continue;
//	}
//	return 0;
//}
//求两个数的最大公约数
//#define Max(x,y) (x>y?x:y)
//#define Min(x,y) (x<y?x:y)
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	//int x = Max(a, b);
//	//int y = Min(a, b);
//	scanf("%d%d", &a, &b);
//		while (c=a % b)
//		{
//			a = b;
//			b = c;
//		}
//	printf("最大公约数为：%d", b);
//	return 0;
//}
////int main()
////{
////	int a = 20;
////	int i = 25;
////	int c = a % i;
////	printf("%d\n", c);
////	return 0;
////}
//输出1000到2000年之间的闰年
//判断闰年：1：能被四整除且不能被一百整除是闰年
//         2：能被四百整除是闰年
//int main()
//{
//	int year = 0;
//	int i = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		if (year % 4 == 0 && year % 100 != 0)
//		{
//			printf("%d ", year);
//			i++;
//		}
//		else if (year % 400 == 0)
//		{
//			printf("%d ", year);
//			i++;
//		}	
//	}
//	printf("\n闰年数为 ： %d ", i);
//	return 0;
//}
//改版：
//int main()
//{
//	int year = 0;
//	int i = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)
//		{
//			printf("%d ", year);
//			i++;
//		}
//	}
//	printf("\n闰年数为 ： %d ", i);
//	return 0;
//}
//打印一百到两百之间的素数
//判断素数：试除法：用该数字把从二到选定数字都除一遍
//2,优化：sqrt：开平方的数学库函数--<math.h>
//原理为：如果能在开平方以内找到因数，就不用往上找了，找不到就一定没有因数。
//3.再优化，所有的偶数不可能是素数，所以直接试奇数即可
//#include<math.h>
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int count = 0;
//	for (i = 101; i <= 200; i+=2)
//	{
//		for (j = 2; j <=sqrt(i); j++)
//		{
//			if (i % j == 0)
//			{
//				break;
//			}
//		}
//		if (j>sqrt(i))
//		{
//			count++;
//			printf("%d ", i);
//		}
//	}
//	printf("\n素数总数为：%d", count);
//	return 0;
//}
// 
//把1到100存到数组里
//int arr[100];
//int count = 0;
//for (i = 0; i < 100; ++i)
//{
//	arr[i] = i + 1;
//}
//推荐《素数求解的n种境界》
//数1到100之间的整数中9出现的次数
//int main()
//{
//	int a = 0;
//	int i = 0;
//	for (a = 1; a <= 100; a++)
//	{
//		if (a % 10 == 9)
//		{
//			i++;
//			printf("%d ", a);
//		} 
//		if (a / 10 == 9)
//		{
//			i++;
//			printf("%d ", a);
//		}
//	}
//	printf("%d ", i);
//	return 0;
//}

//分数求和1/1-1/2+1/3-1/4+1/5-1/6+1/7-1/8。。。-1/100
//int main()
//{
//	double i = 0;
//	double sum = 0;
//
//	for (i = 1; i <= 100; i+=2)
//	{
//		sum += 1.0 / i;
//	}
//	for (i = 2; i <= 100; i += 2)
//	{
//		
//		sum -= 1.0 / i;
//	}
//	printf("和为： %lf ", sum);
//	return 0;
//}
//优化：
//int main()
//{
//	int i = 0;
//	int a = 1;
//	double sum = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		sum +=a*( 1.0 / i);
//		a = -a;
//	}
//	printf("总和为：%lf", sum);
//	return 0;
//}
//求十个整数中的最大值
//#define Max(x,y) (x>y?x:y)
//int main()
//{
//	int arr[10] = {-1,-2,-3,-4,-5,-6,-7,-8,-9,-10};
//	int count = 0;
//	int i = 0;
//	int a = arr[0];
///*	for (i = -10; i < 0; i++)
//	{
//		arr[i] = i + 1;
//	}*/	
//	//scanf("%d",arr);
//	for (i = 0; i < 10; i++)
//	{
//		a = Max(a, arr[i]);
//	}
//	printf("最大的数是：%d", a);
//	return 0;
//}
//写一个乘法口诀表
int main()
{
	int i = 0;
	int a = 1;
	for (i = 1; i < 10; i++)
	{
		for (a = 1; a <= i; a++)
		{
			printf("%d*%d=%-2d  ", i, a, i * a);
		}           //结果%2d是右对齐，%-2d是左对齐
		printf("\n");
	}
	return 0;
}
